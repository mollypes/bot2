import logging

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton

import db
import exceptions
import tasks

logging.basicConfig(level=logging.INFO)

API_TOKEN = '2079872666:AAGj-tH_4WasvGQCBvggT9tLzDAlj4OtAy0'

EARN = 'üí• –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å'
BALANCE = 'üí∞ –ë–∞–ª–∞–Ω—Å'
WITHDRAW = 'üí∏ –í—ã–≤–æ–¥'
INVITE = 'üíå –ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ'
HELP = '‚ùì –ü–æ–º–æ—â—å'

VAL = '‚ÇΩ'

REFERRALS = 5
MIN_WITHDRAW = 1000

BOT_NAME = 'User_1112_bot'

storage = MemoryStorage()
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=storage)

start_markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, )
buttons = [
    KeyboardButton(EARN, callback_data='button1'),
    KeyboardButton(BALANCE, callback_data='button2'),
    KeyboardButton(WITHDRAW, callback_data='button3'),
    KeyboardButton(INVITE, callback_data='button4'),
    KeyboardButton(HELP, callback_data='button5')]
start_markup.add(buttons[0]).row(buttons[1], buttons[2]).row(buttons[3], buttons[4])


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–º–æ—â—å –ø–æ –±–æ—Ç—É"""
    user_id = message.from_user.id

    is_user = db.insert_user(user_id, API_TOKEN)

    if len(message.text.split()) > 1:
        referral_id = message.text.split()[1]
    else:
        referral_id = None

    if is_user != -1:
        if referral_id is not None:
            if int(referral_id) != int(user_id):
                await db.update_referral(referral_id)
                await db.update_balance_referral(referral_id)

    await message.reply("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=start_markup)


async def help_reply(message: types.Message):
    text = await db.fetch_text_for_command(message.text)

    await message.answer(f"{text}")


async def invite_reply(message: types.Message):
    id_ = message.from_user.id
    link = f'https://telegram.me/{BOT_NAME}?start={str(id_)}'

    counter_of_users_ = await db.fetch_balance(id_)
    counter_of_users = counter_of_users_[1]
    if counter_of_users >= 5:
        status = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π"
    else:
        status = "–ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π"

    text = f"üó£ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ —á–µ–ª–æ–≤–µ–∫: {counter_of_users}\n\n" \
           f"–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å 100‚ÇΩ\n\n" \
           f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞, –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –¥—Ä—É–≥—É:\n\n{link}\n\n" \
           f"üåö –í–∞—à —Å—Ç–∞—Ç—É—Å: {status}\n\n" \
           f"–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–º–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç—É—Å, –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –æ—Ç {REFERRALS}-—Ö —á–µ–ª–æ–≤–µ–∫ –ø–æ —Å–≤–æ–µ–π –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π —Å—Å—ã–ª–∫–µ."

    await message.answer(text)


async def new_task(message: types.Message, user_id=None):
    try:
        print(user_id)
        if user_id is None:
            user_id = message.from_user.id
            print(user_id)

        data = await db.fetch_task(user_id)

        task_id = data['id']
        praise_ = await db.get_praise(data['category'])

        is_done = await db.is_task_done(task_id, user_id)
        # print(is_done)
        if is_done is None:
            text_ = await db.fetch_text_for_category(data['category'])

            markup = InlineKeyboardMarkup(row_width=1)
            button1 = InlineKeyboardButton('üíé –ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ', url=data['url'], callback_data='url')
            button2 = InlineKeyboardButton('‚úÖ –Ø –≤—ã–ø–æ–ª–Ω–∏–ª', callback_data=f'rev:{praise_}:{task_id}')
            button3 = InlineKeyboardButton('‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', callback_data=f'skip:{task_id}')
            markup.add(button1, button2, button3)
            print("try")
            await bot.send_message(
                message.chat.id,
                f"‚ûï –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ {praise_}{VAL}:"
                f"\n\n{text_} \n\n"
                f"2Ô∏è‚É£ –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å‚ö°Ô∏è—Å—é–¥–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å üí∞ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ.",
                reply_markup=markup
            )

            try:
                done_task = await tasks.add_done_task(task_id, user_id, 'offer', 0)

            except exceptions.NotCorrectMessage:
                await message.answer("–ù–µ –º–æ–≥—É –∑–∞–ø–∏—Å–∞—Ç—å —Ç–∞–∫—É—é –∑–∞–¥–∞—á—É üò¢")
                return
        else:
            await message.answer("–ö–∞–∂–µ—Ç—Å—è, –∑–∞–¥–∞—á –ø–æ–∫–∞ –Ω–µ—Ç üò¢\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —á–µ—Ä–µ–∑ –ø–∞—Ä—É —á–∞—Å–æ–≤!")
            return
    except IndexError:
        await message.answer("–ö–∞–∂–µ—Ç—Å—è, –∑–∞–¥–∞—á –ø–æ–∫–∞ –Ω–µ—Ç üò¢\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —á–µ—Ä–µ–∑ –ø–∞—Ä—É —á–∞—Å–æ–≤!")
        return

    # @dp.callback_query_handler(lambda c: c.data == 'url')
    # async def button_url(call: types.callback_query):
    #     await db.cheng_following('done_tasks', task_id, user_id)


@dp.callback_query_handler(lambda c: 'rev' in c.data)
async def button_rev(call: types.CallbackQuery):
    user_id = call.from_user.id
    print(user_id)
    rev, praise_, task_id = call.data.split(":")
    await db.cheng_in_doneTask('done_tasks', task_id, user_id)
    await db.balance_update(praise_, user_id)

    markup1 = InlineKeyboardMarkup(row_width=1)
    button_newtask = InlineKeyboardButton("‚ú®–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ‚ú®", callback_data='new_task')
    markup1.add(button_newtask)

    await bot.edit_message_text(chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                text=f"–¢—ã –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ!\n\n"
                                     f"–ù–∞–≥—Ä–∞–¥–∞: {praise_}{VAL}", )
    # reply_markup=markup1)


@dp.callback_query_handler(lambda c: 'skip' in c.data)
async def button_skip(call: types.CallbackQuery):
    user_id_ = call.from_user.id
    skip, task_id = call.data.split(":")

    await db.skip_in_doneTask('done_tasks', task_id, user_id_)

    markup1 = InlineKeyboardMarkup(row_width=1)
    button_newtask = InlineKeyboardButton("‚ú®–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ‚ú®", callback_data='new_task')
    markup1.add(button_newtask)

    await bot.edit_message_text(chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                text=f"–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –∑–∞–¥–∞–Ω–∏—è.\n\n"
                                     f" –ù–∞–≥—Ä–∞–¥–∞: 0{VAL}", )
    # reply_markup=markup1)


# @dp.callback_query_handler(lambda c: c.data == 'new_task')
# async def button_new_task(message: types.Message):
#     await new_task(message)
#     return


async def balance(message: types.Message):
    user_id = message.from_user.id
    balance, counter_or_invite = await db.fetch_balance(user_id)
    await message.answer(f"üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å:\n\n"
                         f"–°—É–º–º–∞: {balance}{VAL}\n\n"
                         f"–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ {counter_or_invite} –¥—Ä—É–∑–µ–π.")


async def check_for_withdraw(balance, counter_or_invite):
    if counter_or_invite < REFERRALS:
        await bot.edit_message_text(chat_id=call.message.chat.id,
                                    message_id=call.message.message_id,
                                    text=f"–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ —Ç–æ–ª—å–∫–æ {counter_or_invite} –¥—Ä—É–∑–µ–π...\n"
                                         f"–ê –¥–ª—è –≤—ã–≤–æ–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ {REFERRALS}\n\n"
                                         f"–î—Ä—É–∑—å—è –∑–∞—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –û–ù–ò –ü–ï–†–ï–®–õ–ò –ü–û –í–ê–®–ï–ô "
                                         f"–°–°–´–õ–ö–ï-–ü–†–ò–ì–õ–ê–®–ï–ù–ò–Æ!")
    elif balance < MIN_WITHDRAW:
        await bot.edit_message_text(chat_id=call.message.chat.id,
                                    message_id=call.message.message_id,
                                    text=f"–í—ã –∑–∞—Ä–±–æ—Ç–∞–ª–∏ —Ç–æ–ª—å–∫–æ {balance}...\n"
                                         f"–ê –¥–ª—è –≤—ã–≤–æ–¥–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ {MIN_WITHDRAW}\n\n"
                                         f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è! –ò —Å–∫–æ—Ä–æ –í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–∏ –¥–µ–Ω—å–≥–∏!")


class Withdraw(StatesGroup):
    system = State()
    number = State()


async def withdraw(message: types.Message):
    await Withdraw.system.set()

    markup = ReplyKeyboardMarkup(row_width=1)
    button1 = KeyboardButton('QIWI', callback_data='Qiwi')
    button2 = KeyboardButton('YooMoney', callback_data='YoMoney')
    button3 = KeyboardButton('–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞', callback_data='credit_card')
    markup.add(button1, button2, button3)

    await bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:",
        reply_markup=markup
    )


@dp.message_handler(state='*', commands='cancel')
@dp.message_handler(Text(equals='cancel', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    """
    Allow user to cancel any action
    """
    current_state = await state.get_state()
    if current_state is None:
        return

    # Cancel state and inform user about it
    await state.finish()
    # And remove keyboard (just in case)
    await message.reply('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.')


@dp.message_handler(lambda message: message.text not in ["QIWI", "YooMoney", "–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞"],
                    state=Withdraw.system)
async def process_category_invalid(message: types.Message):
    """
    In this example category is Wrong.
    """
    return await message.reply("–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –≤—ã–±—Ä–∞–ª —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ.\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")


@dp.message_handler(state=Withdraw.system)
async def system_name(message: types.Message, state: FSMContext):
    """
        system name
    """
    async with state.proxy() as data:
        data['system'] = message.text

    await Withdraw.next()
    markup_ = types.ReplyKeyboardRemove()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞:", reply_markup=markup_)


@dp.message_handler(state=Withdraw.number)
async def system_number(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    balance, counter_or_invite = await db.fetch_balance(user_id)

    await Withdraw.next()
    async with state.proxy() as data:
        data['number'] = message.text

    async with state.proxy() as data:
        try:
            if counter_or_invite < REFERRALS:
                await message.answer(f"–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ —Ç–æ–ª—å–∫–æ {counter_or_invite} –¥—Ä—É–∑–µ–π...\n"
                                     f"–ê –¥–ª—è –≤—ã–≤–æ–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ {REFERRALS}\n\n"
                                     f"–î—Ä—É–∑—å—è –∑–∞—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –û–ù–ò –ü–ï–†–ï–®–õ–ò –ü–û –í–ê–®–ï–ô "
                                     f"–°–°–´–õ–ö–ï-–ü–†–ò–ì–õ–ê–®–ï–ù–ò–Æ!")
            elif balance < MIN_WITHDRAW:
                await message.answer(f"–í—ã –∑–∞—Ä–±–æ—Ç–∞–ª–∏ —Ç–æ–ª—å–∫–æ {balance}...\n"
                                     f"–ê –¥–ª—è –≤—ã–≤–æ–¥–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ {MIN_WITHDRAW}\n\n"
                                     f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è! –ò —Å–∫–æ—Ä–æ –í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–∏ –¥–µ–Ω—å–≥–∏!")
            else:
                withdraw = await tasks.add_withdraw(user_id, data['system'], balance, data['number'])
                answer_message = (
                    f"–°–∏—Å—Ç–µ–º–∞ –≤—ã–≤–æ–¥–∞: {data['system']}\n"
                    f"–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞: {data['number']}\n"
                    f"–†–∞–∑–º–µ—Ä –≤—ã–≤–æ–¥–∞: {balance}\n"
                    f"–î–æ –≤—ã–≤–≤–æ–¥–∞ –æ—Å—Ç–∞–ª–æ—Å—å —Ä–æ–≤–Ω–æ 7 –¥–Ω–µ–π!\n\n"
                    f"–ú–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á;) –î–ª—è —ç—Ç–æ–≥–æ –∫–ª–∏–∫–Ω–∏ /start"
                )
                await message.answer(answer_message)
                await check_for_withdraw(balance, counter_or_invite)

        except exceptions.NotCorrectMessage:
            await message.answer("–ù–µ –º–æ–≥—É –∑–∞–ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ üò¢")
            return
        finally:
            await message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=start_markup)


@dp.message_handler(lambda message: message.text)
async def main_handler(message: types.Message):
    if message.text == EARN:
        await new_task(message)
    elif message.text == BALANCE:
        await balance(message)
    elif message.text == WITHDRAW:
        user_id = message.from_user.id
        get_timer = await db.get_timer(user_id)
        empty = []
        if get_timer == empty:
            await withdraw(message)
        else:
            get_timer = get_timer[0][0]
            if tasks.timer_(get_timer) > "0":
                time = tasks.timer(get_timer)
                data = await db.get_withdraw_info(user_id)
                await message.answer(f"–°–∏—Å—Ç–µ–º–∞ –≤—ã–≤–æ–¥–∞: {data[0]}\n"
                                     f"–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞: {data[2]}\n"
                                     f"–†–∞–∑–º–µ—Ä –≤—ã–≤–æ–¥–∞: {data[1]}\n"
                                     f"–î–æ –≤—ã–≤–≤–æ–¥–∞ –æ—Å—Ç–∞–ª–æ—Å—å {time[0]} –¥–Ω–µ–π, {time[2]} —á–∞—Å–æ–≤ –∏ {time[3]} –º–∏–Ω—É—Ç!\n\n"
                                     f"–ú–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á;) –î–ª—è —ç—Ç–æ–≥–æ –∫–ª–∏–∫–Ω–∏ /start")
            else:
                await message.answer("–í—ã –Ω–∞—Ä—É—à–∏–ª–∏ –ø—Ä–∞–≤–∞!")

    elif message.text == INVITE:
        await invite_reply(message)
    elif message.text == HELP:
        await help_reply(message)
    else:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –í—ã–±–µ—Ä–∏ –ª—é–±—É—é –∏–∑ –∫–æ–Ω–æ–ø–æ–∫")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
